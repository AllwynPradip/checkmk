#!/bin/bash
# Copyright (C) 2022 Checkmk GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

set -e

JOBS=6

failure() {
    test ${#@} -eq 0 || echo "$(basename "$0"):" "$@" >&2
    exit 1
}

usage() {
    echo "usage: $(basename "$0") [OPTION]..."
    echo "Run the CI pipeline or parts of it."
    echo
    echo "  -c, --clean             remove artifacts first"
    echo "  -F, --check-format      check for correct formatting (isort, black)"
    echo "  -u, --unit-tests        run unit tests"
    echo "  -m, --mypy              run mypy"
    echo "  -p, --pylint            run pylint"
    echo "  -B, --bandit            run bandit"
    echo "  -a, --all               shortcut for -F -u -m -p -B -C"
    echo "  -f, --format            format sources"
    echo "  -d, --documentation     generate documentation"
    echo "  -j N, --jobs=N          allow N jobs at once, default is ${JOBS}"
    echo "  -h, --help              show this help"
}

parse_options() {
    # Yes, all those option variables are global.
    RUN_CLEAN=no
    RUN_CHECK_FORMAT=no
    RUN_UNIT_TESTS=no
    RUN_MYPY=no
    RUN_PYLINT=no
    RUN_BANDIT=no
    RUN_FORMAT=no
    RUN_DOCUMENTATION=no

    if ! OPTIONS=$(getopt --options 'cFumpBafdj:h' --long 'clean,check-format,unit-tests,mypy,pylint,bandit,all,format,documentation,jobs:,help' --name "$(basename "$0")" -- "$@"); then
        usage >&2
        failure
    fi
    eval set -- "$OPTIONS"
    unset OPTIONS

    while true; do
        case "$1" in
            '-c' | '--clean')
                RUN_CLEAN=yes
                shift
                continue
                ;;
            '-F' | '--check-format')
                RUN_CHECK_FORMAT=yes
                shift
                continue
                ;;
            '-u' | '--unit-tests')
                RUN_UNIT_TESTS=yes
                shift
                continue
                ;;
            '-m' | '--mypy')
                RUN_MYPY=yes
                shift
                continue
                ;;
            '-p' | '--pylint')
                RUN_PYLINT=yes
                shift
                continue
                ;;
            '-B' | '--bandit')
                RUN_BANDIT=yes
                shift
                continue
                ;;
            '-a' | '--all')
                RUN_CHECK_FORMAT=yes
                RUN_UNIT_TESTS=yes
                RUN_MYPY=yes
                RUN_PYLINT=yes
                RUN_BANDIT=yes
                shift
                continue
                ;;
            '-f' | '--format')
                RUN_FORMAT=yes
                shift
                continue
                ;;
            '-d' | '--documentation')
                RUN_DOCUMENTATION=yes
                shift
                continue
                ;;
            '-j' | '--jobs')
                JOBS="$2"
                shift 2
                continue
                ;;
            '-h' | '--help')
                usage
                exit 0
                ;;
            '--')
                shift
                test ${#@} -eq 0 || failure "extra arguments:" "$@"
                break
                ;;
            *) failure "internal error" ;;
        esac
    done

    readonly RUN_CLEAN RUN_CHECK_FORMAT RUN_UNIT_TESTS RUN_MYPY RUN_PYLINT RUN_BANDIT RUN_FORMAT RUN_DOCUMENTATION JOBS
}

run_pipenv() {
    PIPENV_CACHE_DIR="$(pwd)/.cache" \
    PIPENV_VENV_IN_PROJECT=true \
    PIPENV_NOSPIN=true \
    PIPENV_HIDE_EMOJIS=true \
    PIPENV_NO_INHERIT=true \
    PIPENV_PIPFILE="$(pwd)/Pipfile" \
    PIPENV_IGNORE_VIRTUALENVS=1 \
        pipenv "$@"
}

setup_venv() {
    test "${SETUP_VENV_RAN}" = "yes" && return
    # --quiet doesn't really work, see https://github.com/pypa/pipenv/issues/5037, but redirecting
    # stdout is OK, errors go to stderr, and so do the initial venv creation messages.
    run_pipenv sync --dev >/dev/null
    run_pipenv clean
    # poor man's "activate", but without any danger of naming clashes
    PATH="$(pwd)/.venv/bin:$PATH"
    hash -r
    SETUP_VENV_RAN=yes
}

run_clean() {
    rm -rf .cache .mypy_cache .pytest_cache .venv
}

run_check_format() {
    setup_venv
    # shellcheck disable=SC2086
    isort --check-only --diff $1
    # shellcheck disable=SC2086
    black --quiet --check --diff $1
}

run_unit_tests() {
    setup_venv
    pytest
}

run_mypy() {
    setup_venv
    # shellcheck disable=SC2086
    mypy --scripts-are-modules --show-error-codes $1
}

run_pylint() {
    setup_venv
    # shellcheck disable=SC2086
    pylint --jobs="${JOBS}" $1
}

run_bandit() {
    setup_venv
    # shellcheck disable=SC2086
    bandit --configfile=pyproject.toml --quiet --recursive --severity-level=high $1
}

run_format() {
    setup_venv
    # shellcheck disable=SC2086
    isort $1
    # shellcheck disable=SC2086
    black --quiet $1
}

run_documentation() {
    echo "TODO: generate documentation"
}

get_candidates_from_filesystem() {
    SEARCH="cmk/graphing tests"

    # Resolve search paths to real paths before the search for performance reasons
    # shellcheck disable=SC2086
    REAL_SEARCH=$(realpath $SEARCH)

    # shellcheck disable=SC2086
    find -L $REAL_SEARCH \
        -name .mypy_cache -prune -o \
        -name .venv -prune -o \
        -type f -print0
}

filter_for_python_files() {
    sort --zero-terminated |
        xargs --no-run-if-empty --null \
            grep --binary-files=without-match --files-with-matches '^#!.*python3$'
}

main() {
    # Change to the directory where this script resides, it makes many things easier
    # and we can call this script from everywhere.
    cd -- "${BASH_SOURCE%/*}"
    parse_options "$@"
    test ${RUN_CLEAN} = yes && run_clean
    python_files=$(get_candidates_from_filesystem | filter_for_python_files)
    test ${RUN_CHECK_FORMAT} = yes && run_check_format "$python_files"
    test ${RUN_UNIT_TESTS} = yes && run_unit_tests
    test ${RUN_MYPY} = yes && run_mypy "$python_files"
    test ${RUN_PYLINT} = yes && run_pylint "$python_files"
    test ${RUN_BANDIT} = yes && run_bandit "$python_files"
    test ${RUN_DOCUMENTATION} = yes && run_documentation
    test ${RUN_FORMAT} = yes && run_format "$python_files"
    true
}

main "$@"
