#!/bin/bash
# Copyright (C) 2022 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

set -e

JOBS=6
readonly CLANG_VERSION=14

failure() {
    test ${#@} -eq 0 || echo "$(basename "$0"):" "$@" >&2
    exit 1
}

usage() {
    echo "usage: $(basename "$0") [OPTION]... [FILE]..."
    echo "Run the CI pipeline or parts of it on the given FILEs or the whole component."
    echo
    echo "  -c, --clean                    remove artifacts first"
    echo "  -d, --transitive-dependencies  use transitive dependencies for the given FILEs"
    echo "  -F, --check-format             check for correct formatting"
    echo "  -b, --build                    build Livestatus library"
    echo "  -U, --build-unit-tests         build unit tests"
    echo "  -u, --unit-tests               run unit tests"
    echo "  -i, --iwyu                     check C/C++ includes via include-what-you-use"
    echo "  -t, --clang-tidy               check sources with clang-tidy linter"
    echo "  -a, --all                      shortcut for -F -b -U -u -i -t"
    echo "  -A, --build-all                shortcut for -b -U"
    echo "  -f, --format                   format sources with clang-format"
    echo "  -D, --documentation            generate documentation"
    echo "  -j N, --jobs=N                 allow N jobs at once, default is ${JOBS}"
    echo "  -h, --help                     show this help"
}

parse_options() {
    # Yes, all those option variables are global.
    RUN_CLEAN=no
    RUN_TRANSITIVE_DEPENDENCIES=no
    RUN_CHECK_FORMAT=no
    RUN_BUILD=no
    RUN_BUILD_UNIT_TESTS=no
    RUN_UNIT_TESTS=no
    RUN_IWYU=no
    RUN_CLANG_TIDY=no
    RUN_FORMAT=no
    RUN_DOCUMENTATION=no
    FILES=()

    if ! OPTIONS=$(getopt --options 'cdFbUuitaAfDj:h' --long 'clean,transitive-dependencies,check-format,build,build-unit-tests,unit-tests,iwyu,clang-tidy,all,build-all,format,documentation,jobs:,help' --name "$(basename "$0")" -- "$@"); then
        usage >&2
        failure
    fi
    eval set -- "$OPTIONS"
    unset OPTIONS

    while true; do
        case "$1" in
            '-c' | '--clean')
                RUN_CLEAN=yes
                shift
                continue
                ;;
            '-d' | '--transitive-dependencies')
                RUN_TRANSITIVE_DEPENDENCIES=yes
                shift
                continue
                ;;
            '-F' | '--check-format')
                RUN_CHECK_FORMAT=yes
                shift
                continue
                ;;
            '-b' | '--build')
                RUN_BUILD=yes
                shift
                continue
                ;;
            '-U' | '--build-unit-tests')
                RUN_BUILD_UNIT_TESTS=yes
                shift
                continue
                ;;
            '-u' | '--unit-tests')
                RUN_UNIT_TESTS=yes
                shift
                continue
                ;;
            '-i' | '--iwyu')
                RUN_IWYU=yes
                shift
                continue
                ;;
            '-t' | '--clang-tidy')
                RUN_CLANG_TIDY=yes
                shift
                continue
                ;;
            '-a' | '--all')
                RUN_CHECK_FORMAT=yes
                RUN_BUILD=yes
                RUN_UNIT_TESTS=yes
                RUN_IWYU=yes
                RUN_CLANG_TIDY=yes
                shift
                continue
                ;;
            '-A' | '--build-all')
                RUN_BUILD=yes
                RUN_BUILD_UNIT_TESTS=yes
                shift
                continue
                ;;
            '-f' | '--format')
                RUN_FORMAT=yes
                shift
                continue
                ;;
            '-D' | '--documentation')
                RUN_DOCUMENTATION=yes
                shift
                continue
                ;;
            '-j' | '--jobs')
                JOBS="$2"
                shift 2
                continue
                ;;
            '-h' | '--help')
                usage
                exit 0
                ;;
            '--')
                shift
                FILES=("$@")
                break
                ;;
            *) failure "internal error" ;;
        esac
    done
    readonly RUN_CLEAN RUN_TRANSITIVE_DEPENDENCIES RUN_CHECK_FORMAT RUN_BUILD RUN_UNIT_TESTS RUN_IWYU RUN_CLANG_TIDY RUN_FORMAT RUN_DOCUMENTATION FILES JOBS
}

update_cmake_artifacts() {
    if [ "CMakeLists.txt" -nt "build/compile_commands.json" ]; then
        cmake -S . -B build
    fi
}

run_clean() {
    rm -rf build
}

run_transitive_dependencies() {
    # TODO: Just for debugging, remove later
    echo "========== initial file arguments"
    for f in "${FILES[@]}"; do
        echo "file argument: <$f>"
    done
    echo "calculating transitive dependencies of" "${FILES[@]}" # TODO
    # TODO: Just for debugging, remove later
    echo "========== final file arguments"
    for f in "${FILES[@]}"; do
        echo "file argument: <$f>"
    done
}

run_clang_format() {
    # shellcheck disable=SC2086 # Yes, we want splitting for FILES.
    find ${FILES:-src test include} -type f \( -name "*.h" -o -name "*.cc" \) -print0 |
        xargs -0 "clang-format-${CLANG_VERSION}" -style=file "$@"
}

run_build() {
    update_cmake_artifacts
    cmake --build build --parallel "${JOBS}" --target livestatus
}

run_build_unit_tests() {
    update_cmake_artifacts
    cmake --build build --parallel "${JOBS}" --target test
}

run_unit_tests() {
    run_build_unit_tests
    if test -z ${VALGRIND+x} && command -v valgrind >/dev/null; then
        VALGRIND="valgrind --quiet --num-callers=30 --error-exitcode=42"
    fi
    GTEST_OUTPUT=xml ${VALGRIND} build/test/test
}

run_iwyu() {
    update_cmake_artifacts
    # shellcheck disable=SC2086 # Yes, we want splitting for FILES and IWYU_EXTRA_ARGS.
    python3 ../../scripts/iwyu_tool.py \
        --jobs="${JOBS}" \
        --output-format=clang \
        -p build \
        ${FILES:-src test} -- \
        -Xiwyu --error \
        -Xiwyu "--mapping_file=$(realpath ../../livestatus/iwyu-mappings/check_mk.imp)" \
        ${IWYU_EXTRA_ARGS}
}

run_clang_tidy() {
    update_cmake_artifacts
    # shellcheck disable=SC2046,SC2086 # Yes, we want splitting for FILES, CLANG_TIDY_EXTRA_ARGS and realpath
    python3 ../../scripts/run-clang-tidy.py \
        -clang-tidy-binary=clang-tidy-${CLANG_VERSION} \
        -clang-apply-replacements-binary=clang-apply-replacements-${CLANG_VERSION} \
        -quiet \
        -j "${JOBS}" \
        -p=build \
        ${CLANG_TIDY_EXTRA_ARGS} \
        $(realpath ${FILES:-src test}) # to avoid checking of third-party files because files args are regexs
}

run_documentation() {
    doxygen doc/Doxyfile
}

main() {
    # Change to the directory where this script resides, it makes many things easier
    # and we can call this script from everywhere.
    cd -- "${BASH_SOURCE%/*}"
    parse_options "$@"
    test ${RUN_CLEAN} = yes && run_clean
    test ${RUN_TRANSITIVE_DEPENDENCIES} = yes && run_transitive_dependencies
    test ${RUN_CHECK_FORMAT} = yes && run_clang_format --dry-run -Werror
    test ${RUN_BUILD} = yes && run_build
    test ${RUN_BUILD_UNIT_TESTS} = yes && run_build_unit_tests
    test ${RUN_UNIT_TESTS} = yes && run_unit_tests
    test ${RUN_IWYU} = yes && run_iwyu
    test ${RUN_CLANG_TIDY} = yes && run_clang_tidy
    test ${RUN_FORMAT} = yes && run_clang_format -i
    test ${RUN_DOCUMENTATION} = yes && run_documentation
    true
}

main "$@"
