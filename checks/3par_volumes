#!/usr/bin/env python3
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

from collections.abc import Mapping, MutableMapping
from dataclasses import dataclass
from typing import Any

from cmk.base.api.agent_based.type_defs import StringTable

# NOTE: Careful when replacing the *-import below with a more specific import. This can cause
# problems because it might remove variables needed for accessing discovery rulesets.
from cmk.base.check_legacy_includes.df import *  # pylint: disable=wildcard-import,unused-wildcard-import
from cmk.base.plugins.agent_based.utils.threepar import parse_3par

factory_settings["filesystem_default_levels"] = FILESYSTEM_DEFAULT_PARAMS

STATES = {
    1: 0,
    2: 1,
    3: 2,
}

PROVISIONING_MAP = {
    1: "FULL",
    2: "TPVV",
    3: "SNP",
    4: "PEER",
    5: "UNKNOWN",
    6: "TDVV",
    7: "DDS",
}


@dataclass
class ThreePortVolume:
    name: str | None
    is_system_volume: bool
    total_capacity: int
    free_capacity: int
    deduplication: float | None
    compaction: float | None
    provisioning: int
    provisioning_type: str
    state: int
    wwn: str


ThreeParVolumeSection = Mapping[str, ThreePortVolume]


def parse_3par_volumes(string_table: StringTable) -> ThreeParVolumeSection:
    threepar_volumes: MutableMapping[str, ThreePortVolume] = {}

    for volume in parse_3par(string_table).get("members", {}):
        total_capacity = volume["sizeMiB"]
        capacity_efficiency = volume.get("capacityEfficiency")

        threepar_volumes.setdefault(
            volume.get("name"),
            ThreePortVolume(
                name=volume.get("name"),
                is_system_volume=volume["policies"]["system"],
                total_capacity=total_capacity,
                free_capacity=total_capacity - volume["userSpace"]["usedMiB"],
                deduplication=capacity_efficiency.get("deduplication")
                if capacity_efficiency
                else None,
                compaction=capacity_efficiency.get("compaction") if capacity_efficiency else None,
                provisioning=volume["userSpace"]["rawReservedMiB"] * 1024**2,
                provisioning_type=PROVISIONING_MAP[volume["provisioningType"]],
                state=STATES.get(volume["state"], 3),
                wwn=volume["wwn"],
            ),
        )

    return threepar_volumes


def inventory_3par_volumes(section: ThreeParVolumeSection):
    for volume in section.values():
        if not volume.is_system_volume and volume.name:
            yield (volume.name, {})


def check_3par_volumes(
    item: str,
    params: Mapping[str, Any],
    section: ThreeParVolumeSection,
):

    if (volume := section.get(item)) is None:
        return

    yield df_check_filesystem_single(
        item,
        volume.total_capacity,
        volume.free_capacity,
        0,
        None,
        None,
        params,
    )

    if volume.deduplication is not None:
        yield 0, f"Dedup: {volume.deduplication}"

    if volume.compaction is not None:
        yield 0, f"Compact: {volume.compaction}"

    yield volume.state, f"Type: {volume.provisioning_type}, WWN: {volume.wwn}", [
        ("fs_provisioning", volume.provisioning)
    ]


check_info["3par_volumes"] = {
    "parse_function": parse_3par_volumes,
    "inventory_function": inventory_3par_volumes,
    "check_function": check_3par_volumes,
    "service_description": "Volume %s",
    "has_perfdata": True,
    "group": "filesystem",
    "default_levels_variable": "filesystem_default_levels",
}
