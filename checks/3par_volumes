#!/usr/bin/env python3
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

from collections.abc import Mapping
from typing import Any

# NOTE: Careful when replacing the *-import below with a more specific import. This can cause
# problems because it might remove variables needed for accessing discovery rulesets.
from cmk.base.check_legacy_includes.df import *  # pylint: disable=wildcard-import,unused-wildcard-import
from cmk.base.plugins.agent_based.threepar_volumes import ThreeParVolumeSection

factory_settings["filesystem_default_levels"] = FILESYSTEM_DEFAULT_PARAMS


def inventory_3par_volumes(section: ThreeParVolumeSection):
    for volume in section.values():
        if not volume.is_system_volume and volume.name:
            yield (volume.name, {})


def check_3par_volumes(
    item: str,
    params: Mapping[str, Any],
    section: ThreeParVolumeSection,
):

    if (volume := section.get(item)) is None:
        return

    yield df_check_filesystem_single(
        item,
        volume.total_capacity,
        volume.free_capacity,
        0,
        None,
        None,
        params,
    )

    if volume.deduplication is not None:
        yield 0, f"Dedup: {volume.deduplication}"

    if volume.compaction is not None:
        yield 0, f"Compact: {volume.compaction}"

    yield volume.state, f"Type: {volume.provisioning_type}, WWN: {volume.wwn}", [
        ("fs_provisioning", volume.provisioning)
    ]


check_info["3par_volumes"] = {
    # Section already migrated!
    "inventory_function": inventory_3par_volumes,
    "check_function": check_3par_volumes,
    "service_description": "Volume %s",
    "has_perfdata": True,
    "group": "filesystem",
    "default_levels_variable": "filesystem_default_levels",
}
