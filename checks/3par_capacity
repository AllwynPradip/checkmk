#!/usr/bin/env python3
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

from collections.abc import Mapping
from dataclasses import dataclass

from cmk.base.api.agent_based.type_defs import StringTable
from cmk.base.check_api import check_levels

# NOTE: Careful when replacing the *-import below with a more specific import. This can cause
# problems because it might remove variables needed for accessing discovery rulesets.
from cmk.base.check_legacy_includes.df import *  # pylint: disable=wildcard-import,unused-wildcard-import
from cmk.base.plugins.agent_based.utils.threepar import parse_3par

factory_settings["filesystem_default_levels"] = FILESYSTEM_DEFAULT_PARAMS


@dataclass
class ThreeParCapacity:
    name: str
    total_capacity: int
    free_capacity: int
    failed_capacity: int


ThreeParCapacitySection = Mapping[str, ThreeParCapacity]


def parse_3par_capacity(string_table: StringTable) -> ThreeParCapacitySection:

    return {
        raw_name.replace("Capacity", ""): ThreeParCapacity(
            name=raw_name.replace("Capacity", ""),
            total_capacity=raw_values["totalMiB"],
            free_capacity=raw_values["freeMiB"],
            failed_capacity=raw_values["failedCapacityMiB"],
        )
        for raw_name, raw_values in parse_3par(string_table).items()
    }


def inventory_3par_capacity(section: ThreeParCapacitySection):
    for disk in section.values():
        if disk.total_capacity == 0:
            continue
        yield (disk.name, {})


def check_3par_capacity(
    item: str,
    params: Mapping[str, tuple[float, float]],
    section: ThreeParCapacitySection,
):

    if (disk := section.get(item)) is None:
        return

    yield df_check_filesystem_single(
        item,
        disk.total_capacity,
        disk.free_capacity,
        disk.failed_capacity,
        None,
        None,
        params,
    )

    if disk.failed_capacity == 0:
        return

    yield check_levels(
        float(disk.failed_capacity) / float(disk.total_capacity) * 100,
        None,
        params.get("failed_capacity_levels", (0.0, 0.0)),
        infoname=f"{disk.failed_capacity} MB failed",
        human_readable_func=get_percent_human_readable,
    )


check_info["3par_capacity"] = {
    "parse_function": parse_3par_capacity,
    "inventory_function": inventory_3par_capacity,
    "check_function": check_3par_capacity,
    "service_description": "Capacity %s",
    "has_perfdata": True,
    "group": "threepar_capacity",
    "default_levels_variable": "filesystem_default_levels",
}
