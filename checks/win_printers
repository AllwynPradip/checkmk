#!/usr/bin/env python3
# Copyright (C) 2019 Checkmk GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

# Example output from agent:
# Put here the example output from your TCP-Based agent. If the
# <<<win_printers>>>
# PrinterStockholm                      0                   3                   0
# WH1_BC_O3_UPS                         0                   3                   0


# mypy: disable-error-code="var-annotated"

from collections.abc import Iterable, Mapping
from typing import Any, Final, NamedTuple

from cmk.base.config import check_info, factory_settings
from cmk.base.plugins.agent_based.agent_based_api.v1.type_defs import StringTable

factory_settings["win_printer_default_levels"] = {
    "warn_states": [8, 11],
    "crit_states": [9, 10],
}


class PrinterQueue(NamedTuple):
    jobs: int
    status: int
    error: int


Section = Mapping[str, PrinterQueue]

_STATUS_MAP: Final = {
    1: "Other",
    2: "Unkown",
    3: "Idle",
    4: "Printing",
    5: "Warming Up",
    6: "Stopped Printing",
    7: "Offline",
}

_ERROR_MAP: Final = {
    0: "Unkown",
    1: "Other",
    2: "No Error",
    3: "Low Paper",
    4: "No Paper",
    5: "Low Toner",
    6: "No Toner",
    7: "Door Open",
    8: "Jammed",
    9: "Offline",
    10: "Service Requested",
    11: "Output Bin Full",
}


def parse_win_printers(string_table: StringTable) -> Section:
    parsed: dict[str, PrinterQueue] = {}
    for line in string_table:
        if len(line) < 4:
            continue
        try:
            parsed.setdefault(
                " ".join(line[:-3]), PrinterQueue(int(line[-3]), int(line[-2]), int(line[-1]))
            )
        except ValueError:
            pass
    return parsed


def discover_win_printers(section: Section) -> Iterable[tuple[str, dict]]:
    # Do not discover offline printers
    yield from ((item, {}) for item, queue in section.items() if queue.error != 9)


def check_win_printers(
    item: str, params: Mapping[str, Any], section: Section
) -> Iterable[tuple[int, str]]:
    if (queue := section.get(item)) is None:
        return

    warn, crit = params.get("levels", (None, None))

    state = 0

    error_text = ""
    if queue.error in params["crit_states"]:
        state = 2
        error_text = "Error State: %s(!!)" % _ERROR_MAP[queue.error]
    elif queue.error in params["warn_states"]:
        state = 1
        error_text = "Error State: %s(!)" % _ERROR_MAP[queue.error]

    queue_label = ""
    if crit is not None and queue.jobs >= crit:
        state = 2
        queue_label = "(!!)"
    elif warn is not None and queue.jobs >= warn:
        state = max(1, state)
        queue_label = "(!)"

    yield state, "%s jobs current%s, State: %s, %s" % (
        queue.jobs,
        queue_label,
        _STATUS_MAP[queue.status],
        error_text,
    )


check_info["win_printers"] = {
    "parse_function": parse_win_printers,
    "check_function": check_win_printers,
    "check_ruleset_name": "windows_printer_queues",
    "discovery_function": discover_win_printers,
    "service_name": "Printer %s",
    "default_levels_variable": "win_printer_default_levels",
}
