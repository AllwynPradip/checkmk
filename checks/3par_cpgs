#!/usr/bin/env python3
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

from collections.abc import Mapping
from typing import Any

import pydantic

from cmk.base.api.agent_based.type_defs import StringTable

# NOTE: Careful when replacing the *-import below with a more specific import. This can cause
# problems because it might remove variables needed for accessing discovery rulesets.
from cmk.base.check_legacy_includes.df import *  # pylint: disable=wildcard-import,unused-wildcard-import
from cmk.base.plugins.agent_based.utils.threepar import parse_3par

factory_settings["filesystem_default_levels"] = FILESYSTEM_DEFAULT_PARAMS


class SpaceUsage(pydantic.BaseModel):
    totalMiB: int
    usedMiB: int

    @property
    def freeMiB(self):
        return self.totalMiB - self.usedMiB


class ThreeparCPG(pydantic.BaseModel):
    name: str
    state: int
    num_fpvvs: int = pydantic.Field(alias="numFPVVs")  # number of Fully Provisioned Virtual Volumes
    num_tdvvs: int = pydantic.Field(alias="numTDVVs")  # number of Thinly Deduped Virtual Volumes
    num_tpvvs: int = pydantic.Field(
        alias="numTPVVs"
    )  # number of Thinly Provisioned Virtual Volumes
    sa_usage: SpaceUsage = pydantic.Field(alias="SAUsage")  # Snapshot administration usage
    sd_usage: SpaceUsage = pydantic.Field(alias="SDUsage")  # Snapshot data space usage
    usr_usage: SpaceUsage = pydantic.Field(alias="UsrUsage")  # User data space usage


ThreeparCPGSection = Mapping[str, ThreeparCPG]

STATES = {
    1: (0, "Normal"),
    2: (1, "Degraded"),
    3: (2, "Failed"),
}


def parse_3par_cpgs(string_table: StringTable) -> ThreeparCPGSection:
    if (raw_members := parse_3par(string_table).get("members")) is None:
        return {}

    return {cpgs.get("name"): ThreeparCPG.parse_obj(cpgs) for cpgs in raw_members}


def count_3par_vvs(cpg: ThreeparCPG) -> int:
    return cpg.num_fpvvs + cpg.num_tdvvs + cpg.num_tpvvs


def discover_3par_cpgs(section: ThreeparCPGSection):
    for cpg in section.values():
        if cpg.name and count_3par_vvs(cpg) > 0:
            yield (cpg.name, {})


def check_3par_cpgs(item: str, params: Mapping[str, Any], section: ThreeparCPGSection):
    if (cpg := section.get(item)) is None:
        return

    state, state_readable = STATES[cpg.state]
    yield state, f"{state_readable}, {count_3par_vvs(cpg)} VVs"


check_info["3par_cpgs"] = {
    "parse_function": parse_3par_cpgs,
    "inventory_function": discover_3par_cpgs,
    "check_function": check_3par_cpgs,
    "service_description": "CPG %s",
}


def discover_3par_cpgs_usage(section: ThreeparCPGSection):
    for cpg in section.values():
        if count_3par_vvs(cpg) > 0:
            for fs in [
                "SAUsage",
                "SDUsage",
                "UsrUsage",
            ]:
                yield (f"{cpg.name} {fs}", {})


def check_3par_cpgs_usage(item: str, params: Mapping[str, Any], section: ThreeparCPGSection):

    for cpg in section.values():

        if f"{cpg.name} SAUsage" == item:
            yield df_check_filesystem_single(
                mountpoint=item,
                size_mb=cpg.sa_usage.totalMiB,
                avail_mb=cpg.sa_usage.freeMiB,
                reserved_mb=0,
                inodes_total=0,
                inodes_avail=0,
                params=params,
            )

        if f"{cpg.name} SDUsage" == item:
            yield df_check_filesystem_single(
                mountpoint=item,
                size_mb=cpg.sd_usage.totalMiB,
                avail_mb=cpg.sd_usage.freeMiB,
                reserved_mb=0,
                inodes_total=0,
                inodes_avail=0,
                params=params,
            )

        if f"{cpg.name} UsrUsage" == item:
            yield df_check_filesystem_single(
                mountpoint=item,
                size_mb=cpg.usr_usage.totalMiB,
                avail_mb=cpg.usr_usage.freeMiB,
                reserved_mb=0,
                inodes_total=0,
                inodes_avail=0,
                params=params,
            )


check_info["3par_cpgs.usage"] = {
    "inventory_function": discover_3par_cpgs_usage,
    "check_function": check_3par_cpgs_usage,
    "service_description": "CPG %s",
    "has_perfdata": True,
    "group": "threepar_cpgs",
    "default_levels_variable": "filesystem_default_levels",
}
