#!/usr/bin/env python3
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

# This check extracts data from 1.3.6.1.2.1.16.1.1.1 =
# iso(1). org(3). dod(6). internet(1). mgmt(2). mib-2(1). rmon(16).
# statistics(1). etherStatsTable(1). etherStatsEntry(1)
# The MIB is called RMON-MIB


import time
from typing import Iterable, Mapping

from cmk.base.check_api import check_levels, get_rate
from cmk.base.plugins.agent_based.agent_based_api.v1.type_defs import StringTable

DiscoveryResult = Iterable[tuple[str, dict]]
CheckResult = Iterable[tuple]

PortStats = Mapping[str, int]

_FIELDS = ["bcast", "mcast", "0-63b", "64-127b", "128-255b", "256-511b", "512-1023b", "1024-1518b"]


rmon_discovery = []


def parse_rmon_stats(string_table: StringTable) -> Mapping[str, PortStats]:
    return {
        port: {k: int(v.replace(" Packets", "")) for k, v in zip(_FIELDS, row)}
        for port, *row in string_table
    }


def discover_rmon_stats(section: Mapping[str, PortStats]) -> DiscoveryResult:
    params = host_extra_conf_merged(host_name(), rmon_discovery)
    if params.get("discover", False):
        yield from ((item, {}) for item in section)


def check_rmon_stats(
    item: str, params: Mapping[str, object], section: Mapping[str, PortStats]
) -> CheckResult:
    if (stats := section.get(item)) is None:
        return

    now = time.time()
    for metric, octets in stats.items():
        yield check_levels(
            get_rate(metric, now, octets),
            metric,
            None,
            human_readable_func=lambda v: "%.0f octets/sec" % v,
            infoname=metric,
        )


check_info["rmon_stats"] = {
    "parse_function": parse_rmon_stats,
    "check_function": check_rmon_stats,
    "inventory_function": discover_rmon_stats,
    "service_description": "RMON Stats IF %s",
    "has_perfdata": True,
    "snmp_info": (
        ".1.3.6.1.2.1.16.1.1.1",
        [  #
            "1",  # etherStatsIndex = Item
            "6",  # etherStatsBroadcastPkts
            "7",  # etherStatsMulticastPkts
            "14",  # etherStatsPkts64Octets
            "15",  # etherStatsPkts65to127Octets
            "16",  # etherStatsPkts128to255Octets
            "17",  # etherStatsPkts256to511Octets
            "18",  # etherStatsPkts512to1023Octets
            "19",  # etherStatsPkts1024to1518Octets
        ],
    ),
    # for the scan we need to check for any single object in the RMON tree,
    # we choose netDefaultGateway in the hope that it will always be present
    "snmp_scan_function": lambda oid: (
        oid(".1.3.6.1.2.1.1.1.0").lower().startswith("cisco")
        or oid(".1.3.6.1.2.1.1.2.0") == ".1.3.6.1.4.1.11863.1.1.3"
    )
    and oid(".1.3.6.1.2.1.16.19.12.0") is not None,
}
