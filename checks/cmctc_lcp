#!/usr/bin/env python3
# Copyright (C) 2019 Checkmk GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

from collections.abc import Iterable, Mapping
from typing import Any, NamedTuple

from cmk.base.check_legacy_includes.cmctc import cmctc_translate_status, cmctc_translate_status_text
from cmk.base.check_legacy_includes.temperature import check_temperature, TempParamType
from cmk.base.config import check_info
from cmk.base.plugins.agent_based.agent_based_api.v1.type_defs import StringTable
from cmk.base.plugins.agent_based.utils.cmctc import DETECT_CMCTC

# mypy: disable-error-code="list-item"


class Sensor(NamedTuple):
    index_: str
    status: str
    value: str
    high: str
    low: str
    warn: str
    description: str
    type_: str


Section = Mapping[str, Sensor]


_CMCTC_LCP_SENSORS = {
    "4": (None, "access"),
    "12": (None, "humidity"),
    # User Sensors
    "13": ("normally open", "user"),
    "14": ("normally closed", "user"),
    # Leakage
    "23": (None, "flow"),
    "30": (None, "current"),
    "31": (None, "status"),
    "32": (None, "position"),
    # Blower
    "40": ("1", "blower"),
    "41": ("2", "blower"),
    "42": ("3", "blower"),
    "43": ("4", "blower"),
    "44": ("5", "blower"),
    "45": ("6", "blower"),
    "46": ("7", "blower"),
    "47": ("8", "blower"),
    # Server in/out
    "48": ("Server in 1", "temp"),
    "49": ("Server out 1", "temp"),
    "50": ("Server in 2", "temp"),
    "51": ("Server out 2", "temp"),
    "52": ("Server in 3", "temp"),
    "53": ("Server out 3", "temp"),
    "54": ("Server in 4", "temp"),
    "55": ("Server out 4", "temp"),
    # Overview Server
    "56": ("Overview Server in", "temp"),
    "57": ("Overview Server out", "temp"),
    # Water
    "58": ("Water in", "temp"),
    "59": ("Water out", "temp"),
    "60": (None, "flow"),
    # Other stuff
    "61": (None, "blowergrade"),
    "62": (None, "regulator"),
}


def parse_cmctc_lcp(string_table: StringTable) -> Section:
    return {
        f"{sensor_spec[0]} - {index}"
        if sensor_spec[0]
        else index: Sensor(
            index_=index,
            status=status,
            value=value,
            high=high,
            low=low,
            warn=warn,
            description=description,
            type_=sensor_spec[1],
        )
        for index, typeid, status, value, high, low, warn, description in string_table
        if (sensor_spec := _CMCTC_LCP_SENSORS.get(typeid))
    }


def inventory_cmctc_lcp(section: Section, sensortype: str) -> Iterable[tuple[str, dict]]:
    yield from ((item, {}) for item, sensor in section.items() if sensor.type_ == sensortype)


def check_cmctc_lcp(
    item: str, params: Any, section: Section, sensortype: str
) -> Iterable[tuple[int, str, list]]:
    map_sensor_state = {
        "1": (3, "not available"),
        "2": (2, "lost"),
        "3": (1, "changed"),
        "4": (0, "ok"),
        "5": (2, "off"),
        "6": (0, "on"),
        "7": (1, "warning"),
        "8": (2, "too low"),
        "9": (2, "too high"),
        "10": (2, "error"),
    }

    map_unit = {
        "access": "",
        "current": " A",
        "status": "",
        "position": "",
        "temp": " Â°C",
        "blower": " RPM",
        "blowergrade": "",
        "humidity": "%",
        "flow": " l/min",
        "regulator": "%",
        "user": "",
    }

    if (sensor := section.get(item)) is None:
        return

    unit = map_unit[sensor.type_]
    value = int(sensor.value)
    infotext = ""
    if sensor.description:
        infotext += "[%s] " % sensor.description
    state, extra_info = map_sensor_state[sensor.status]
    yield state, "%s%d%s" % (infotext, value, unit), []

    extra_state = 0
    if params:
        warn, crit = params
        perfdata = [(sensortype, value, warn, crit)]
        if value >= crit:
            extra_state = 2
        elif value >= warn:
            extra_state = 1

        if extra_state:
            extra_info += " (warn/crit at %d/%d%s)" % (warn, crit, unit)
    else:
        perfdata = [(sensortype, value)]
        # Assumption: if high and low are both 0
        # then there are no device levels
        if not (int(sensor.high) == 0 and int(sensor.low) == 0) and int(sensor.high) > int(
            sensor.low
        ):
            if value >= int(sensor.high) or value <= int(sensor.low):
                extra_state = 2
                extra_info += " (device lower/upper crit at %s/%s%s)" % (
                    sensor.low,
                    sensor.high,
                    unit,
                )

    yield extra_state, extra_info, perfdata


def inventory_cmctc_lcp_temp(section: Section, sensortype: str) -> Iterable[tuple[str, dict]]:
    yield from inventory_cmctc_lcp(section, "temp")


def check_cmctc_lcp_temp(
    item: str, params: TempParamType, section: Section
) -> Iterable[tuple[int, str, list]]:
    if (sensor := section.get(item)) is None:
        return

    status = int(sensor.status)
    levels = (
        None
        if sensor.high == sensor.low == sensor.warn == "0"
        else (float(sensor.warn), float(sensor.high))
    )
    levels_low = (
        None
        if sensor.high == sensor.low == sensor.warn == "0"
        else (float(sensor.low), float("-inf"))
    )  # no lower critical level specified
    yield check_temperature(
        float(sensor.value),
        params,
        "cmctc_lcp_temp_%s" % item,
        dev_levels=levels,
        dev_levels_lower=levels_low,
        dev_status=cmctc_translate_status(status),
        dev_status_name="Unit: %s" % cmctc_translate_status_text(status),
    )


check_info["cmctc_lcp"] = {
    "detect": DETECT_CMCTC,
    "snmp_info": (
        ".1.3.6.1.4.1.2606.4.2",
        [
            "3",  # cmcTcUnit1OutputTable
            "4",  # cmcTcUnit2OutputTable
            "5",  # cmcTcUnit3OutputTable
            "6",  # cmcTcUnit4OutputTable
        ],
        [
            "5.2.1.1",  # Index
            "5.2.1.2",  # Sensor Type
            "5.2.1.4",  # Status
            "5.2.1.5",  # Value
            "5.2.1.6",  # High
            "5.2.1.7",  # Low
            "5.2.1.8",  # Warn
            "7.2.1.2",  # Description
        ],
    ),
}

check_info["cmctc_lcp.access"] = {
    "check_function": lambda item, params, info: check_cmctc_lcp(item, params, info, "access"),
    "inventory_function": lambda info: inventory_cmctc_lcp(info, "access"),
    "service_description": "Access %s",
}

check_info["cmctc_lcp.blower"] = {
    "check_function": lambda item, params, info: check_cmctc_lcp(item, params, info, "blower"),
    "inventory_function": lambda info: inventory_cmctc_lcp(info, "blower"),
    "service_description": "Blower %s",
}

check_info["cmctc_lcp.blowergrade"] = {
    "check_function": lambda item, params, info: check_cmctc_lcp(item, params, info, "blowergrade"),
    "inventory_function": lambda info: inventory_cmctc_lcp(info, "blowergrade"),
    "service_description": "Blower Grade %s",
}

check_info["cmctc_lcp.current"] = {
    "check_function": lambda item, params, info: check_cmctc_lcp(item, params, info, "current"),
    "inventory_function": lambda info: inventory_cmctc_lcp(info, "current"),
    "service_description": "Current %s",
}

check_info["cmctc_lcp.flow"] = {
    "check_function": lambda item, params, info: check_cmctc_lcp(item, params, info, "flow"),
    "inventory_function": lambda info: inventory_cmctc_lcp(info, "flow"),
    "service_description": "Waterflow %s",
}

check_info["cmctc_lcp.humidity"] = {
    "check_function": lambda item, params, info: check_cmctc_lcp(item, params, info, "humidity"),
    "inventory_function": lambda info: inventory_cmctc_lcp(info, "humidity"),
    "service_description": "Humidity %s",
}

check_info["cmctc_lcp.position"] = {
    "check_function": lambda item, params, info: check_cmctc_lcp(item, params, info, "position"),
    "inventory_function": lambda info: inventory_cmctc_lcp(info, "position"),
    "service_description": "Position %s",
}

check_info["cmctc_lcp.regulator"] = {
    "check_function": lambda item, params, info: check_cmctc_lcp(item, params, info, "regulator"),
    "inventory_function": lambda info: inventory_cmctc_lcp(info, "regulator"),
    "service_description": "Regulator %s",
}

check_info["cmctc_lcp.status"] = {
    "check_function": lambda item, params, info: check_cmctc_lcp(item, params, info, "status"),
    "inventory_function": lambda info: inventory_cmctc_lcp(info, "status"),
    "service_description": "Status %s",
}

check_info["cmctc_lcp.user"] = {
    "check_function": lambda item, params, info: check_cmctc_lcp(item, params, info, "user"),
    "inventory_function": lambda info: inventory_cmctc_lcp(info, "user"),
    "service_description": "User Sensor %s",
}

# temperature check is standardised
check_info["cmctc_lcp.temp"] = {
    "check_function": check_cmctc_lcp_temp,
    "inventory_function": inventory_cmctc_lcp_temp,
    "service_description": "Temperature %s",
    "group": "temperature",
}
