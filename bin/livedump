#!/usr/bin/env python3
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

import getopt
import os
import sys
import time
from collections.abc import Callable
from dataclasses import dataclass
from typing import Any, NoReturn

from livestatus import SingleSiteConnection

# These variable will be substituted at 'make dist' time
__version__ = "2.2.0i1"


def dump_templates() -> None:
    check_interval = ""
    if args.check_interval is not None:
        check_interval = "check_interval          %d" % args.check_interval

    sys.stdout.write(
        """define host {
    name                    livedump-host
    use                     check_mk_default
    register                0
    active_checks_enabled   0
    passive_checks_enabled  1
    %s
}

define service {
    name                    livedump-service
    register                0
    active_checks_enabled   0
    passive_checks_enabled  1
    check_period            0x0
    %s
}

define command {
    command_name            check-livedump
    command_line            echo "WARN - You did an active check, but this check is passive" ; exit 1
}

define timeperiod {
    timeperiod_name         0x0
    alias                   Never ever
}

"""
        % (check_interval, check_interval)
    )


#   .-Livedump-------------------------------------------------------------.
#   |            _     _               _                                   |
#   |           | |   (_)_   _____  __| |_   _ _ __ ___  _ __              |
#   |           | |   | \ \ / / _ \/ _` | | | | '_ ` _ \| '_ \             |
#   |           | |___| |\ V /  __/ (_| | |_| | | | | | | |_) |            |
#   |           |_____|_| \_/ \___|\__,_|\__,_|_| |_| |_| .__/             |
#   |                                                   |_|                |
#   +----------------------------------------------------------------------+
#   | The actual livedump                                                  |
#   '----------------------------------------------------------------------'


def connect(socket_path: str | None) -> SingleSiteConnection:
    if not socket_path and not omd_root():
        bail_out("Please specify the URL of the livestatus socket.")
    if omd_root():
        socket_path = "unix:%s/tmp/run/live" % omd_root()
    elif socket_path is None:
        bail_out("No socket specified")
    return SingleSiteConnection(socket_path)


def livedump_config() -> None:  # pylint: disable=too-many-branches
    connection = connect(args.socket)
    if args.mark_mode:
        sys.stdout.write("config %s\n" % omd_site())
    if args.dump_templates:
        dump_templates()

    def prepare_row(row: dict[str, Any]) -> None:
        row["contactsstring"] = ",".join(row["contacts"])
        if "contact_groups" in row:
            row["contact_groups"] = ",".join(row["contact_groups"])

    # Dump host config
    query = (
        "GET hosts\n"
        "Columns: name alias address groups check_command icon_image "
        "max_check_attempts contacts contact_groups\n" + args.host_headers + args.host_only_headers
    )
    for row in connection.query_table_assoc(query):
        prepare_row(row)
        row["groupstring"] = ",".join(row["groups"])
        sys.stdout.write("define host {\n  use                livedump-host\n")
        sys.stdout.write("  host_name          %s%s\n" % (args.prefix, row["name"]))
        sys.stdout.write(
            "  alias              %(alias)s\n"
            "  address            %(address)s\n"
            "  host_groups        %(groupstring)s\n"
            "  check_command      %(check_command)s\n"
            "  max_check_attempts %(max_check_attempts)d\n" % row
        )

        if args.groups:
            sys.stdout.write("  contacts           %s\n" % row["contactsstring"])
        else:
            sys.stdout.write("  contact_groups     %s\n" % row["contact_groups"])

        if args.host_icon:
            if row.get("icon_image"):
                sys.stdout.write("  icon_image         %s\n" % row["icon_image"])

        sys.stdout.write("}\n\n")

    # Dump service config
    query = (
        "GET services\n"
        "Columns: host_name description groups check_command "
        "max_check_attempts contacts\n" + args.host_headers + args.service_headers
    )
    for row in connection.query_table_assoc(query):
        prepare_row(row)
        if row["groups"]:
            row["groupstring"] = "service_groups " + ",".join(row["groups"])
        else:
            row["groupstring"] = ""
        row["contactsstring"] = ",".join(row["contacts"])
        sys.stdout.write("define service {\n  use                livedump-service\n")
        sys.stdout.write("  host_name          %s%s\n" % (args.prefix, row["host_name"]))
        sys.stdout.write(
            "  description        %(description)s\n"
            "  %(groupstring)s\n"
            "  check_command      check-livedump\n"
            "  contacts           %(contactsstring)s\n"
            "  max_check_attempts %(max_check_attempts)d\n"
            "}\n\n" % row
        )


def livedump_state() -> None:
    connection = connect(args.socket)
    if args.mark_mode:
        sys.stdout.write("status\n")
    now = time.time()
    # Dump hosts
    query = (
        "GET hosts\n"
        "Columns: name state plugin_output perf_data latency\n"
        + args.host_headers
        + args.host_only_headers
    )

    for row in connection.query_table_assoc(query):
        row["now"] = now
        sys.stdout.write("host_name=%s%s" % (args.prefix, row["name"]))
        sys.stdout.write(
            """
check_type=1
check_options=0
reschedule_check
latency=%(latency).2f
start_time=%(now).1f
finish_time=%(now).1f
return_code=%(state)d
output=%(plugin_output)s|%(perf_data)s

"""
            % row
        )

    query = (
        "GET services\n"
        "Columns: host_name description state plugin_output perf_data latency\n"
        + args.host_headers
        + args.service_headers
    )

    for row in connection.query_table_assoc(query):
        row["now"] = now
        sys.stdout.write("host_name=%s%s" % (args.prefix, row["host_name"]))
        sys.stdout.write(
            """
service_description=%(description)s
check_type=1
check_options=0
reschedule_check
latency=%(latency).2f
start_time=%(now).1f
finish_time=%(now).1f
return_code=%(state)d
output=%(plugin_output)s|%(perf_data)s

"""
            % row
        )


# .
#   .-Helpers--------------------------------------------------------------.
#   |                  _   _      _                                        |
#   |                 | | | | ___| |_ __   ___ _ __ ___                    |
#   |                 | |_| |/ _ \ | '_ \ / _ \ '__/ __|                   |
#   |                 |  _  |  __/ | |_) |  __/ |  \__ \                   |
#   |                 |_| |_|\___|_| .__/ \___|_|  |___/                   |
#   |                              |_|                                     |
#   +----------------------------------------------------------------------+
#   | Various helper functions                                             |
#   '----------------------------------------------------------------------'


def omd_root() -> str | None:
    return os.getenv("OMD_ROOT")


def omd_site() -> str | None:
    return os.getenv("OMD_SITE")


def bail_out(x: str) -> NoReturn:
    sys.stderr.write("%s\n" % x)
    sys.exit(1)


def usage(status: int) -> NoReturn:
    sys.stderr.write(
        """Usage: %s [OPTION]...

  -s, --socket S             Connect to Livestatus-socket at S
                             -s tcp:10.11.0.55:6557
                             -s unix:/var/run/nagios/rw/live

  -C, --config               Dump configuration (instead of state)

  -T, --dump-templates       Also dump host/service templates

  -M, --mark-mode            Puts the mode (state/configuration dump) in the first
                             line for use with livedump-ssh-recv and similar scripts

  -p, --prefix P             Add a prefix P to hostnames. Use this option to dump live
                             data from multiple sites with duplicated hostnames

  -O, --host-only-header H   Add header H to host queries only (usually Filter: ...)

  -H, --host-header H        Add header H to host queries (usually Filter: ...)
                             This header is also used in service queries

  -S, --service-header H     Add header H to service queries (usually Filter: ...)

  -i, --interval I           Assume this check interval for hosts/services. This is
                             used in nagios config definition "check_interval".
                             Will be used for staleness checks on the server. This
                             option is only used when dumping the config together
                             with templates (-C -T)

  -G, --include-groups       Use contact groups instead of contacts on dumping config

      --include-host-icon    Add host icon_image to config

  -V, --version              Show version and exit
  -h, --help                 Show this help
      --debug                Do not catch Python exceptions
"""
        % os.path.split(sys.argv[0])[1]
    )
    sys.exit(status)


def print_version() -> NoReturn:
    sys.stdout.write("This is livedump version %s\n" % __version__)
    sys.exit(0)


# .
#   .-main-----------------------------------------------------------------.
#   |                                       _                              |
#   |                       _ __ ___   __ _(_)_ __                         |
#   |                      | '_ ` _ \ / _` | | '_ \                        |
#   |                      | | | | | | (_| | | | | |                       |
#   |                      |_| |_| |_|\__,_|_|_| |_|                       |
#   |                                                                      |
#   +----------------------------------------------------------------------+
#   | Main entry point, getopt, etc.                                       |
#   '----------------------------------------------------------------------'

short_options = "ChVTMp:s:O:H:S:i:G"
long_options = [
    "config",
    "help",
    "version",
    "dump-templates",
    "mark-mode",
    "prefix=",
    "socket=",
    "host-only-header=",
    "host-header=",
    "service-header=",
    "interval=",
    "include-groups",
    "include-host-icon",
    "debug",
]


@dataclass
class Namespace:
    debug: bool = False
    mark_mode: bool = False
    prefix: str = ""
    host_headers: str = ""
    host_only_headers: str = ""
    service_headers: str = ""
    dump_templates: bool = False
    groups: bool = False
    host_icon: bool = False
    check_interval: int | None = None
    socket: str | None = None
    dumper: Callable[[], None] = livedump_state


try:
    opts, _args = getopt.getopt(sys.argv[1:], short_options, long_options)
    args = Namespace()
except getopt.GetoptError as err:
    sys.stderr.write("%s\n\n" % err)
    usage(1)

for o, a in opts:
    if o in ["-h", "--help"]:
        usage(0)
    elif o in ["-V", "--version"]:
        print_version()
    elif o in ["-C", "--config"]:
        args.dumper = livedump_config
    elif o in ["-T", "--dump-templates"]:
        args.dump_templates = True
    elif o in ["-M", "--mark-mode"]:
        args.mark_mode = True
    elif o in ["-p", "--prefix"]:
        args.prefix = a
    elif o in ["-s", "--socket"]:
        args.socket = a
    elif o in ["-O", "--host-only-header"]:
        args.host_only_headers += a + "\n"
    elif o in ["-H", "--host-header"]:
        args.host_headers += a + "\n"
    elif o in ["-S", "--service-header"]:
        args.service_headers += a + "\n"
    elif o in ["-i", "--interval"]:
        args.check_interval = int(a)
    elif o in ["-G", "--include-groups"]:
        args.groups = True
    elif o in ["--include-host-icon"]:
        args.host_icon = True
    elif o == "--debug":
        args.debug = True

try:
    args.dumper()
except Exception as e:
    if args.debug:
        raise
    bail_out(str(e))
