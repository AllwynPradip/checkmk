#!/usr/bin/env python3
# Copyright (C) 2024 Checkmk GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.
"""Ensure the message broker certificates are created"""

import argparse
import logging
import sys
from dataclasses import dataclass
from pathlib import Path

from dateutil.relativedelta import relativedelta

from cmk import messaging
from cmk.crypto.certificate import CertificateWithPrivateKey, PersistedCertificateWithPrivateKey

_CN_TEMPLATE = "Site '{}' broker CA"
_ORG_TEMPLATE = "Checkmk Site {}"


@dataclass(frozen=True)
class Arguments:
    omd_root: Path
    site_name: str


def initialize_message_broker_certs(omd_root: Path, site_name: str) -> None:
    """Initialize the CA and create the certificate for use with the message broker.
    These might be replaced by the config sync later.
    """

    ca = CertificateWithPrivateKey.generate_self_signed(
        common_name=_CN_TEMPLATE.format(site_name),
        organization=_ORG_TEMPLATE.format(site_name),
        expiry=relativedelta(years=5),
        key_size=4096,
        is_ca=True,
    )

    # be sure the folder of cacert_file are created
    cacert_file = messaging.cacert_file(omd_root)
    cacert_file.parent.mkdir(parents=True, exist_ok=True)

    PersistedCertificateWithPrivateKey.persist(ca, cacert_file, messaging.ca_key_file(omd_root))

    bundle = ca.issue_new_certificate(
        common_name=site_name,  # used for user identification
        organization=_ORG_TEMPLATE.format(site_name),
        expiry=relativedelta(years=2),
        key_size=4096,
    )

    PersistedCertificateWithPrivateKey.persist(
        bundle, messaging.site_cert_file(omd_root), messaging.site_key_file(omd_root)
    )
    messaging.trusted_cas_file(omd_root).write_text(cacert_file.read_text())


def _parse_arguments(argv: list[str]) -> Arguments:
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("omd_root", help="The OMD root directory")
    parser.add_argument("site_name", help="The site name")

    args = parser.parse_args(argv[1:])
    return Arguments(
        omd_root=Path(args.omd_root),
        site_name=str(args.site_name),
    )


def main(argv: list[str]) -> int:
    logger = logging.getLogger("cmk-message-broker-certs")
    logger.addHandler(handler := logging.StreamHandler(stream=sys.stdout))
    handler.setFormatter(logging.Formatter("%(message)s"))
    logger.setLevel(logging.INFO)

    try:
        args = _parse_arguments(argv)
        initialize_message_broker_certs(args.omd_root, args.site_name)
    except Exception as e:
        logger.error("Error: %s", e)
        return 1

    return 0


if __name__ == "__main__":
    main(sys.argv)
